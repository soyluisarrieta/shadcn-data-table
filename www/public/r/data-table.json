{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "data-table",
  "type": "registry:block",
  "title": "Data table",
  "description": "Data Table with sorting, filtering, pagination, and responsive design.",
  "files": [
    {
      "path": "src/components/commons/data-table/data-table.tsx",
      "content": "import * as React from 'react'\r\nimport {\r\n  type ColumnDef,\r\n  type Table as TableType,\r\n  type VisibilityState,\r\n  type ColumnFiltersState,\r\n  type SortingState,\r\n  flexRender,\r\n  getCoreRowModel,\r\n  getFilteredRowModel,\r\n  getPaginationRowModel,\r\n  getSortedRowModel,\r\n  useReactTable\r\n} from '@tanstack/react-table'\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow\r\n} from '@/components/ui/table'\r\nimport { DataTableLeftToolbar, DataTableRightToolbar, DataTableToolbar } from '@/components/commons/data-table/data-table-toolbar'\r\nimport DataTableFooter from '@/components/commons/data-table/data-table-footer'\r\nimport { DataTableColumnHeader } from '@/components/commons/data-table/data-table-column-header'\r\nimport { DataTableColumnSelection } from '@/components/commons/data-table/data-table-column-selection'\r\nimport DataTableSelectionActions from '@/components/commons/data-table/data-table-selection-actions'\r\nimport { FILTERS } from '@/components/commons/data-table/data-table-filters'\r\nimport type { CustomColumnDef, CustomColumnDefProps, DataTableActions, FilterableColumn } from '@/components/commons/data-table/data-table-types'\r\n\r\nexport function DataTable<TData, TValue> ({\r\n  columns,\r\n  data,\r\n  disableRowSelection = false,\r\n  actions = {},\r\n  filterableColumns,\r\n  disableCopyJSON = false\r\n}: {\r\n  columns: Array<ColumnDef<TData, TValue> & CustomColumnDefProps<TData>>;\r\n  data: TData[];\r\n  disableRowSelection?: boolean;\r\n  actions?: DataTableActions<TData>;\r\n  filterableColumns?: Array<FilterableColumn<TData>>;\r\n  disableCopyJSON?: boolean;\r\n}) {\r\n  const [sorting, setSorting] = React.useState<SortingState>([])\r\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([])\r\n  const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>({})\r\n  const [rowSelection, setRowSelection] = React.useState({})\r\n\r\n  const extendedColumn = React.useMemo(() => {\r\n    return columns.map(column => {\r\n      const filter = filterableColumns?.find((field) => field.columnKey === column.accessorKey)\r\n      if (filter) {\r\n        column.filterFn = FILTERS[filter.type]\r\n      } else if (!column.filterFn) {\r\n        column.filterFn = FILTERS.partialMatch\r\n      }\r\n      const accessorFn = (originalRow: TData) =>\r\n        originalRow[column.accessorKey as keyof TData]?.toString()\r\n      return {\r\n        accessorFn: column.accessorKey ? accessorFn : undefined,\r\n        ...column\r\n      }\r\n    })\r\n  }, [columns, filterableColumns])\r\n\r\n  const memorizedColumns = React.useMemo(() => {\r\n    if (!disableRowSelection) {\r\n      return [\r\n        DataTableColumnSelection<TData>(),\r\n        ...extendedColumn\r\n      ]\r\n    }\r\n    return extendedColumn\r\n  }, [extendedColumn, disableRowSelection])\r\n\r\n  const table = useReactTable({\r\n    data,\r\n    columns: memorizedColumns,\r\n    globalFilterFn: FILTERS.globalSearch,\r\n    defaultColumn: { filterFn: FILTERS.partialMatch },\r\n    onSortingChange: setSorting,\r\n    onColumnFiltersChange: setColumnFilters,\r\n    onColumnVisibilityChange: setColumnVisibility,\r\n    onRowSelectionChange: setRowSelection,\r\n    getCoreRowModel: getCoreRowModel(),\r\n    getPaginationRowModel: getPaginationRowModel(),\r\n    getSortedRowModel: getSortedRowModel(),\r\n    getFilteredRowModel: getFilteredRowModel(),\r\n    state: {\r\n      sorting,\r\n      columnFilters,\r\n      columnVisibility,\r\n      rowSelection\r\n    }\r\n  })\r\n\r\n  const widthExists = columns.some((column) => column.width)\r\n  const minWidthExists = columns.some((column) => column.minWidth)\r\n\r\n  const selectedRows = table.getFilteredSelectedRowModel().rows.length\r\n\r\n  return (\r\n    <>\r\n      <DataTableToolbar>\r\n        <DataTableLeftToolbar table={table} />\r\n        <DataTableRightToolbar\r\n          table={table}\r\n          onExport={actions?.onExport}\r\n          disableCopyJSON={disableCopyJSON}\r\n        />\r\n      </DataTableToolbar>\r\n\r\n      <div className=\"rounded-md border relative\">\r\n        <Table className={!widthExists ? 'w-auto' : 'w-full'}>\r\n          <DataTableHeader\r\n            table={table}\r\n            widthExists={widthExists}\r\n            minWidthExists={minWidthExists}\r\n            filterableColumns={filterableColumns}\r\n          />\r\n          <TableBody>\r\n            {table.getRowModel().rows?.length ? (\r\n              <DataTableRow\r\n                table={table}\r\n                widthExists={widthExists}\r\n                minWidthExists={minWidthExists}\r\n              />\r\n            ) : (\r\n              <TableRow>\r\n                <TableCell colSpan={columns.length + 1} className=\"h-24 text-center\">\r\n                  No results.\r\n                </TableCell>\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n\r\n        <DataTableSelectionActions\r\n          table={table}\r\n          selectedRows={selectedRows}\r\n          actions={actions}\r\n        />\r\n\r\n        <DataTableFooter table={table} />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nfunction DataTableHeader <TData> ({\r\n  table,\r\n  widthExists,\r\n  minWidthExists,\r\n  filterableColumns\r\n}: {\r\n  table: TableType<TData>;\r\n  widthExists: boolean;\r\n  minWidthExists: boolean;\r\n  filterableColumns?: Array<FilterableColumn<TData>>;\r\n}) {\r\n  return (\r\n    <TableHeader>\r\n      {table.getHeaderGroups().map((headerGroup) => (\r\n        <TableRow key={headerGroup.id}>\r\n          {headerGroup.headers.map((header) => {\r\n            const column = header.column.columnDef as CustomColumnDef<TData>\r\n            const columnStyle: React.CSSProperties = {\r\n              width: widthExists ? (column.width === 'auto' ? 0 : column.width) : '100%',\r\n              minWidth: minWidthExists ? column.minWidth : undefined\r\n            }\r\n            const filterableColumn = filterableColumns?.find((field) => field.columnKey === header.column.id)\r\n            return (\r\n              <TableHead\r\n                key={header.id}\r\n                className='px-0'\r\n                style={columnStyle}\r\n              >\r\n                <DataTableColumnHeader\r\n                  className='mr-1'\r\n                  header={header}\r\n                  filterableColumn={filterableColumn}\r\n                />\r\n              </TableHead>\r\n            )\r\n          })}\r\n        </TableRow>\r\n      ))}\r\n    </TableHeader>\r\n  )\r\n}\r\n\r\nfunction DataTableRow <TData> ({\r\n  table,\r\n  widthExists,\r\n  minWidthExists\r\n}: {\r\n  table: TableType<TData>;\r\n  widthExists: boolean;\r\n  minWidthExists: boolean;\r\n}) {\r\n  return (\r\n    table.getRowModel().rows.map((row) => (\r\n      <TableRow\r\n        key={row.id}\r\n        data-state={row.getIsSelected() && 'selected'}\r\n      >\r\n        {row.getVisibleCells().map((cell) => {\r\n          const column = cell.column.columnDef as CustomColumnDef<TData>\r\n          const columnStyle: React.CSSProperties = {\r\n            width: widthExists ? (column.width === 'auto' ? 0 : column.width) : '100%',\r\n            minWidth: minWidthExists ? column.minWidth : undefined,\r\n            textAlign: column.align\r\n          }\r\n          return (\r\n            <TableCell\r\n              key={cell.id}\r\n              className='px-3'\r\n              style={columnStyle}\r\n            >\r\n              {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n            </TableCell>\r\n          )\r\n        })}\r\n      </TableRow>\r\n    ))\r\n  )\r\n}\r\n",
      "type": "registry:block"
    },
    {
      "path": "src/components/commons/data-table/data-table-types.ts",
      "content": "import { type FilterType } from '@/components/commons/data-table/data-table-filters'\r\nimport { type ColumnDef } from '@tanstack/react-table'\r\n\r\ntype OnClickActionBase<TData, TReturn = void> = (rows: TData[], cleanRowSelection: () => void) => TReturn\r\n\r\nexport type CustomColumnDefProps<TData> = {\r\n  accessorKey?: keyof TData;\r\n  width?: string | number;\r\n  align?: 'left' | 'right' | 'center';\r\n  minWidth?: string | number;\r\n  label?: string;\r\n}\r\n\r\nexport type FilterableOption = {\r\n  label: string;\r\n  value: string;\r\n  icon?: React.ComponentType<{ className?: string }>;\r\n  count?: number;\r\n}\r\n\r\nexport interface FilterableColumn<TData> {\r\n  columnKey: keyof TData;\r\n  label?: string;\r\n  type: `${FilterType}`;\r\n  options?: FilterableOption[]\r\n}\r\n\r\nexport type SelectionActionProps<TData> = {\r\n  label?: string;\r\n  icon?: React.ComponentType<{ className?: string }>;\r\n  onClick: OnClickActionBase<TData>;\r\n}\r\n\r\nexport type ExportFormat = 'pdf' | 'csv' | 'json' | 'xlsx'\r\n\r\nexport interface DataTableActions<TData> {\r\n  onExport?: (rows: TData[], format: ExportFormat) => void\r\n  onRemoveRows?: OnClickActionBase<TData>\r\n  customActions?: Array<SelectionActionProps<TData> | { component: OnClickActionBase<TData, React.JSX.Element> }>\r\n  disableExport?: boolean\r\n  disableCopy?: boolean\r\n}\r\n\r\nexport type CustomColumnDef<TData> = ColumnDef<TData> & CustomColumnDefProps<TData>\r\n",
      "type": "registry:file",
      "target": "components/commons/data-table/data-table-types.ts"
    },
    {
      "path": "src/components/commons/data-table/data-table-toolbar.tsx",
      "content": "import {\r\n  DropdownMenu,\r\n  DropdownMenuCheckboxItem,\r\n  DropdownMenuContent,\r\n  DropdownMenuLabel,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuTrigger\r\n} from '@/components/ui/dropdown-menu'\r\nimport { Select,\r\n  SelectContent,\r\n  SelectGroup,\r\n  SelectItem,\r\n  SelectLabel,\r\n  SelectSeparator,\r\n  SelectTrigger,\r\n  SelectValue\r\n} from '@/components/ui/select'\r\nimport type { CustomColumnDef, ExportFormat } from '@/components/commons/data-table/data-table-types'\r\nimport { type Column, type Table } from '@tanstack/react-table'\r\nimport { type DateValue, DatePicker } from '@/components/commons/date-picker'\r\nimport { Button } from '@/components/ui/button'\r\nimport { Input } from '@/components/ui/input'\r\nimport { CheckIcon, CopyIcon, DownloadIcon, Settings2Icon, XCircleIcon } from 'lucide-react'\r\nimport { useEffect, useState } from 'react'\r\nimport { cn } from '@/lib/utils'\r\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover'\r\nimport { ToggleGroup, ToggleGroupItem } from '@/components/ui/toggle-group'\r\nimport { Separator } from '@/components/ui/separator'\r\nimport { Switch } from '@/components/ui/switch'\r\n\r\nfunction DataTableSelectSearch<TData> ({\r\n  columns,\r\n  value,\r\n  onValueChange\r\n}: {\r\n  columns: Column<TData>[],\r\n  value: string,\r\n  onValueChange: (column: string) => void\r\n}) {\r\n  return (\r\n    <Select value={value} onValueChange={onValueChange}>\r\n      <SelectTrigger className=\"w-[120px] rounded-r-none border-r-0 bg-muted/50 text-muted-foreground\">\r\n        <SelectValue placeholder=\"Global\" />\r\n      </SelectTrigger>\r\n      <SelectContent>\r\n        <SelectGroup>\r\n          <SelectLabel>Search by</SelectLabel>\r\n          <SelectSeparator />\r\n          <SelectItem value=\"all\">Global</SelectItem>\r\n          {columns.map((column) => {\r\n            if (!column.getCanFilter()) { return null }\r\n            const col = column.columnDef as CustomColumnDef<TData>\r\n            const label = (col?.label) ?? col.header\r\n            if (!label || typeof label !== 'string') {\r\n              throw new Error(`The \\`${column.id}\\` column header is not a string. Add the \\`label\\` property if the \\`header\\` value does not contain a string.`)\r\n            }\r\n            return (\r\n              <SelectItem key={column.id} value={column.id}>\r\n                {label}\r\n              </SelectItem>\r\n            )}\r\n          )}\r\n        </SelectGroup>\r\n      </SelectContent>\r\n    </Select>\r\n  )\r\n}\r\n\r\nfunction DataTableSearchInput ({\r\n  value,\r\n  onValueChange\r\n}: {\r\n  value: string\r\n  onValueChange: (value: string) => void\r\n}) {\r\n  return (\r\n    <div className=\"relative flex-1 w-full lg:max-w-72\">\r\n      <Input\r\n        className=\"w-full pr-9 rounded-l-none\"\r\n        placeholder=\"Search...\"\r\n        value={value}\r\n        onChange={(e) => onValueChange(e.target.value)}\r\n      />\r\n      {value && (\r\n        <Button\r\n          className=\"h-8 px-2 lg:px-2 absolute right-0 top-1/2 -translate-y-1/2 text-foreground/50 hover:text-foreground\"\r\n          variant=\"link\"\r\n          size=\"icon\"\r\n          onClick={() => onValueChange('')}\r\n        >\r\n          <XCircleIcon />\r\n        </Button>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction DataTableDropdownView<TData> ({\r\n  table\r\n}: {\r\n  table: Table<TData>\r\n}) {\r\n  return (\r\n    <DropdownMenu>\r\n      <Button\r\n        variant=\"outline\"\r\n        className=\"ml-auto flex\"\r\n        asChild\r\n      >\r\n        <DropdownMenuTrigger>\r\n          <Settings2Icon />\r\n          View\r\n        </DropdownMenuTrigger>\r\n      </Button>\r\n      <DropdownMenuContent align=\"end\" className=\"w-[150px]\">\r\n        <DropdownMenuLabel>Toggle columns</DropdownMenuLabel>\r\n        <DropdownMenuSeparator />\r\n        {table\r\n          .getAllColumns()\r\n          .filter((column) => column.id !== 'select' && column.id !== 'actions')\r\n          .map((column) => {\r\n            return (\r\n              <DropdownMenuCheckboxItem\r\n                key={column.id}\r\n                className={cn('capitalize', !column.getIsVisible() && 'line-through')}\r\n                disabled={!column.getCanHide()}\r\n                checked={column.getIsVisible()}\r\n                onCheckedChange={(value: boolean) => column.toggleVisibility(!!value)}\r\n              >\r\n                {column.id}\r\n              </DropdownMenuCheckboxItem>\r\n            )\r\n          })}\r\n      </DropdownMenuContent>\r\n    </DropdownMenu>\r\n  )\r\n}\r\n\r\nfunction DataTableLeftToolbar<TData> ({ table }: { table: Table<TData> }) {\r\n  const [searchBy, setSearchBy] = useState('all')\r\n  const [searchValue, setSearchValue] = useState('')\r\n\r\n  useEffect(() => {\r\n    table.setGlobalFilter({ searchBy, searchValue })\r\n  }, [searchBy, searchValue, table])\r\n\r\n  return (\r\n    <div className='flex-1'>\r\n      <div className='flex'>\r\n        <DataTableSelectSearch\r\n          columns={table.getAllLeafColumns()}\r\n          value={searchBy}\r\n          onValueChange={setSearchBy}\r\n        />\r\n        <DataTableSearchInput\r\n          value={searchValue}\r\n          onValueChange={setSearchValue}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction DataTableRightToolbar<TData> ({\r\n  table,\r\n  onExport,\r\n  disableCopyJSON = false\r\n}: {\r\n  table: Table<TData>\r\n  onExport?: (data: TData[], format: ExportFormat) => void\r\n  disableCopyJSON?: boolean\r\n}) {\r\n  const [dateFilter, setDateFilter] = useState<DateValue>()\r\n  const [openExportPopover, setOpenExportPopover] = useState(false)\r\n  const [selectedFormat, setSelectedFormat] = useState<ExportFormat>('pdf')\r\n  const [filteredOnly, setFilteredOnly] = useState(true)\r\n  const [hasCopied, setHasCopied] = useState(false)\r\n\r\n  useEffect(() => {\r\n    table.setColumnFilters(oldFilters => {\r\n      const otherFilters = oldFilters.filter(filter => filter.id !== 'date')\r\n      if (dateFilter) {\r\n        return [...otherFilters, { id: 'date', value: dateFilter }]\r\n      }\r\n      return otherFilters\r\n    })\r\n  }, [dateFilter, table])\r\n\r\n  // Obtener las filas filtradas o todas las filas existentes\r\n  const getRows = () => filteredOnly\r\n    ? table.getFilteredRowModel().flatRows.map(row => row.original)\r\n    : table.getCoreRowModel().flatRows.map(row => row.original)\r\n\r\n  const handleCopy = () => {\r\n    const formattedRowsJSON = JSON.stringify(getRows(), null, 2)\r\n    navigator.clipboard.writeText(formattedRowsJSON)\r\n    setHasCopied(true)\r\n    setTimeout(() => {\r\n      setHasCopied(false)\r\n    }, 2000)\r\n  }\r\n\r\n  return (\r\n    <div className='hidden lg:flex gap-1'>\r\n      <DatePicker\r\n        value={dateFilter}\r\n        onValueChange={setDateFilter}\r\n        onReset={() => { setDateFilter(undefined) }}\r\n      />\r\n      <DataTableDropdownView table={table} />\r\n      {onExport && (\r\n        <div className='flex items-center'>\r\n          <Popover open={openExportPopover} onOpenChange={setOpenExportPopover}>\r\n            <Button\r\n              className=\"rounded-none first:rounded-s-lg last:rounded-e-lg\"\r\n              variant='outline'\r\n              asChild\r\n            >\r\n              <PopoverTrigger>\r\n                <DownloadIcon className=\"text-muted-foreground\" size={16} strokeWidth={2} />\r\n              </PopoverTrigger>\r\n            </Button>\r\n            <PopoverContent className='w-auto p-0' align='end'>\r\n              <div className=\"space-y-3\">\r\n                <h4 className=\"font-medium leading-none px-4 mt-4\">Formats</h4>\r\n                <ToggleGroup\r\n                  className='px-3 [&_button]:px-4'\r\n                  value={selectedFormat}\r\n                  type=\"single\"\r\n                  onValueChange={(format: ExportFormat) => setSelectedFormat(format)}\r\n                  variant='outline'\r\n                >\r\n                  <ToggleGroupItem value=\"pdf\">PDF</ToggleGroupItem>\r\n                  <ToggleGroupItem value=\"csv\">CSV</ToggleGroupItem>\r\n                  <ToggleGroupItem value=\"xlsx\">EXCEL</ToggleGroupItem>\r\n                  <ToggleGroupItem value=\"json\">JSON</ToggleGroupItem>\r\n                </ToggleGroup>\r\n\r\n                <div className='flex justify-between items-center gap-2 px-4 text-sm text-mute'>\r\n                  <span>\r\n                    Filtered only\r\n                    <span className='text-xs text-muted-foreground ml-2'>({getRows().length} rows)</span>\r\n                  </span>\r\n                  <Switch\r\n                    checked={filteredOnly}\r\n                    onCheckedChange={setFilteredOnly}\r\n                  />\r\n                </div>\r\n\r\n                <Separator />\r\n\r\n                <div className={cn('w-full px-4 mb-3 flex justify-between gap-1', disableCopyJSON && 'justify-end')}>\r\n                  {!disableCopyJSON && (\r\n                    <Button\r\n                      size='sm'\r\n                      variant='ghost'\r\n                      disabled={hasCopied}\r\n                      onClick={handleCopy}\r\n                    >\r\n                      {hasCopied\r\n                        ? (<><CheckIcon />Copied!</>)\r\n                        : (<><CopyIcon />Copy JSON</>)\r\n                      }\r\n                    </Button>\r\n                  )}\r\n                  <Button\r\n                    size='sm'\r\n                    onClick={() => {\r\n                      onExport?.(getRows(), selectedFormat)\r\n                      setOpenExportPopover(false)\r\n                    }}\r\n                  >\r\n                    {selectedFormat === 'pdf' ? 'Abrir' : 'Download'}\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </PopoverContent>\r\n          </Popover>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction DataTableToolbar ({\r\n  children\r\n}: {\r\n  children?: React.ReactNode\r\n}) {\r\n  return (\r\n    <div className=\"flex items-center py-3\">\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {\r\n  DataTableToolbar,\r\n  DataTableLeftToolbar,\r\n  DataTableRightToolbar,\r\n  DataTableSelectSearch,\r\n  DataTableSearchInput,\r\n  DataTableDropdownView\r\n}\r\n",
      "type": "registry:block"
    },
    {
      "path": "src/components/commons/data-table/data-table-selection-actions.tsx",
      "content": "import type { DataTableActions, SelectionActionProps } from '@/components/commons/data-table/data-table-types'\r\nimport { Button } from '@/components/ui/button'\r\nimport { Checkbox } from '@/components/ui/checkbox'\r\nimport { type Table } from '@tanstack/react-table'\r\nimport { TrashIcon, XIcon } from 'lucide-react'\r\nimport { Fragment } from 'react/jsx-runtime'\r\n\r\ninterface DataTableActionsProps<TData> {\r\n  table: Table<TData>;\r\n  selectedRows: number;\r\n  actions: DataTableActions<TData>\r\n}\r\n\r\nexport default function DataTableSelectionActions<TData> ({ table, selectedRows, actions }: DataTableActionsProps<TData>) {\r\n  if (selectedRows === 0) return null\r\n  const { onRemoveRows, customActions } = actions\r\n\r\n  return (\r\n    <div className='h-0 row-selection-actions flex sticky bottom-1 -translate-y-2 z-10 -scale-100'>\r\n      <div className='h-fit py-1.5 px-2.5 text-sm border rounded-md bg-popover mx-auto -scale-100 flex items-center shadow-lg'>\r\n        <div className='flex items-center gap-2 pr-3'>\r\n          <Checkbox className='pointer-events-none' checked />\r\n          <span className='font-semibold'>{selectedRows} item{selectedRows > 1 && 's'}</span>\r\n        </div>\r\n        <div className='w-px h-6 mx-2 bg-border' />\r\n        {customActions?.map((action, i) => {\r\n          const rows =  table.getSelectedRowModel().flatRows.map((row) => row.original)\r\n          if ('component' in action && action.component) {\r\n            return <Fragment key={i}>{action.component(rows, table.resetRowSelection)}</Fragment>\r\n          }\r\n\r\n          const { label, icon: Icon, onClick } = action as SelectionActionProps<TData>\r\n          return (\r\n            <Fragment key={i}>\r\n              <div className='flex items-center gap-2 mx-0'>\r\n                <Button\r\n                  variant='ghost'\r\n                  size={label ? 'sm' : 'icon'}\r\n                  onClick={() => onClick(rows, table.resetRowSelection)}\r\n                >\r\n                  {Icon && <Icon />}\r\n                  {label && <span className='font-semibold'>{label}</span>}\r\n                </Button>\r\n              </div>\r\n              <div className='w-px h-6 mx-2 bg-border' />\r\n            </Fragment>\r\n          )\r\n        })}\r\n        {onRemoveRows && (\r\n          <>\r\n            <div className='flex items-center gap-2 mx-0'>\r\n              <Button\r\n                className='hover:bg-destructive hover:text-destructive-foreground'\r\n                variant='ghost'\r\n                size='sm'\r\n                onClick={() => onRemoveRows(\r\n                  table\r\n                    .getSelectedRowModel()\r\n                    .flatRows\r\n                    .map((row) => row.original),\r\n                  table.resetRowSelection\r\n                )}\r\n              >\r\n                <TrashIcon />\r\n                <span className='font-semibold'>Remove all</span>\r\n              </Button>\r\n            </div>\r\n            <div className='w-px h-6 mx-2 bg-border' />\r\n          </>\r\n        )}\r\n        <div className='flex items-center gap-2 mx-0'>\r\n          <Button\r\n            className='gap-1.5'\r\n            variant='secondary'\r\n            size='sm'\r\n            onClick={() => table.resetRowSelection()}\r\n          >\r\n            <XIcon /> Cancel\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:block"
    },
    {
      "path": "src/components/commons/data-table/data-table-footer.tsx",
      "content": "import type { Table } from '@tanstack/react-table'\r\nimport {\r\n  ChevronLeftIcon,\r\n  ChevronRightIcon,\r\n  ChevronsLeftIcon,\r\n  ChevronsRightIcon\r\n} from 'lucide-react'\r\n\r\nimport { Button } from '@/components/ui/button'\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue\r\n} from '@/components/ui/select'\r\n\r\ninterface DataTableFooterProps<TData> {\r\n  table: Table<TData>\r\n}\r\n\r\nexport default function DataTableFooter<TData> ({\r\n  table\r\n}: DataTableFooterProps<TData>) {\r\n  const startRowNumber = table.getState().pagination.pageIndex * table.getState().pagination.pageSize + 1\r\n  const endRowNumber = Math.min(\r\n    (table.getState().pagination.pageIndex + 1) * table.getState().pagination.pageSize,\r\n    table.getFilteredRowModel().rows.length\r\n  )\r\n\r\n  return (\r\n    <div className='flex items-center justify-between border-t p-2'>\r\n      <div className=\"hidden lg:inline-block flex-1 text-sm text-muted-foreground\">\r\n        Showing {startRowNumber}-{endRowNumber} of {table.getFilteredRowModel().rows.length} rows\r\n      </div>\r\n      <div className=\"flex flex-1 lg:flex-none justify-between items-center space-x-4\">\r\n        <div className=\"flex items-center space-x-2\">\r\n          <p className=\"text-sm font-medium text-muted-foreground\">Rows per page:</p>\r\n          <Select\r\n            value={`${table.getState().pagination.pageSize}`}\r\n            onValueChange={(value) => table.setPageSize(Number(value))}\r\n          >\r\n            <SelectTrigger className=\"h-8 w-[70px]\">\r\n              <SelectValue placeholder={table.getState().pagination.pageSize} />\r\n            </SelectTrigger>\r\n            <SelectContent side=\"top\">\r\n              {[10, 20, 30, 40, 50].map((pageSize) => (\r\n                <SelectItem key={pageSize} value={`${pageSize}`}>\r\n                  {pageSize}\r\n                </SelectItem>\r\n              ))}\r\n            </SelectContent>\r\n          </Select>\r\n        </div>\r\n        <div className=\"flex items-center space-x-2\">\r\n          <Button\r\n            variant=\"outline\"\r\n            className=\"hidden h-8 w-8 p-0 lg:flex\"\r\n            onClick={() => table.setPageIndex(0)}\r\n            disabled={!table.getCanPreviousPage()}\r\n          >\r\n            <span className=\"sr-only\">Go to first page</span>\r\n            <ChevronsLeftIcon />\r\n          </Button>\r\n          <Button\r\n            variant=\"outline\"\r\n            className=\"h-8 w-8 p-0\"\r\n            onClick={() => table.previousPage()}\r\n            disabled={!table.getCanPreviousPage()}\r\n          >\r\n            <span className=\"sr-only\">Go to previous page</span>\r\n            <ChevronLeftIcon />\r\n          </Button>\r\n          <div className=\"flex px-2 items-center justify-center text-sm font-medium text-muted-foreground\">\r\n            Page {table.getState().pagination.pageIndex + 1} of {table.getPageCount()}\r\n          </div>\r\n          <Button\r\n            variant=\"outline\"\r\n            className=\"h-8 w-8 p-0\"\r\n            onClick={() => table.nextPage()}\r\n            disabled={!table.getCanNextPage()}\r\n          >\r\n            <span className=\"sr-only\">Go to next page</span>\r\n            <ChevronRightIcon />\r\n          </Button>\r\n          <Button\r\n            variant=\"outline\"\r\n            className=\"hidden h-8 w-8 p-0 lg:flex\"\r\n            onClick={() => table.setPageIndex(table.getPageCount() - 1)}\r\n            disabled={!table.getCanNextPage()}\r\n          >\r\n            <span className=\"sr-only\">Got to last page</span>\r\n            <ChevronsRightIcon />\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:block"
    },
    {
      "path": "src/components/commons/data-table/data-table-filters.ts",
      "content": "import type { Row } from '@tanstack/react-table'\r\n\r\nexport enum FilterType {\r\n  MultiSelection = 'multiple-selection',\r\n  SingleSelection = 'single-selection',\r\n  DatePicker = 'date',\r\n}\r\n\r\nexport interface FilterParams<TData, TValue> {\r\n  row: Row<TData>;\r\n  columnId: string;\r\n  filterValue: TValue;\r\n}\r\n\r\nexport type FilterFunction<TData, TValue> = (params: FilterParams<TData, TValue>) => boolean;\r\n\r\nconst createFilter = <TData, TValue>(filterFn: FilterFunction<TData, TValue>) => {\r\n  return (row: Row<TData>, columnId: string, filterValue: TValue) => {\r\n    return filterFn({ row, columnId, filterValue })\r\n  }\r\n}\r\n\r\nconst globalFilterFn = <TData>({\r\n  row,\r\n  filterValue\r\n}: FilterParams<TData, {\r\n  searchBy: string;\r\n  searchValue: string;\r\n}>) => {\r\n  if (!filterValue || !filterValue.searchValue) return true\r\n\r\n  const searchValueLower = filterValue.searchValue.toLowerCase()\r\n\r\n  if (filterValue.searchBy === 'all') {\r\n    return row.getAllCells().some((cell: any) => {\r\n      const cellValue = cell.getValue()\r\n      return String(cellValue).toLowerCase().includes(searchValueLower)\r\n    })\r\n  }\r\n\r\n  const cell = row.getAllCells().find((cell: any) => cell.column.id === filterValue.searchBy)\r\n  if (!cell) return true\r\n  return String(cell.getValue()).toLowerCase().includes(searchValueLower)\r\n}\r\n\r\nconst partialMatchFilterFn = <TData>({\r\n  row,\r\n  columnId,\r\n  filterValue\r\n}: FilterParams<TData, string>) => {\r\n  const rowValue = row.getValue(columnId)\r\n  return String(rowValue).toLowerCase().includes(String(filterValue).toLowerCase())\r\n}\r\n\r\nconst selectionFilterFn = <TData>({\r\n  row,\r\n  columnId,\r\n  filterValue\r\n}: FilterParams<TData, string[]>) => {\r\n  if (!filterValue || filterValue.length === 0) return true\r\n  return filterValue.includes(row.getValue(columnId))\r\n}\r\n\r\nconst formatDate = (date: Date) => date.toISOString().split('T')[0]\r\nconst datePickerFilterFn = <TData>({\r\n  row,\r\n  columnId,\r\n  filterValue\r\n}: FilterParams<TData, Date | {\r\n  from: Date;\r\n  to: Date;\r\n}>) => {\r\n  const rawValue = row.getValue(columnId)\r\n  if (!rawValue) return false\r\n\r\n  const dateStr = typeof rawValue === 'string' ? rawValue : formatDate(rawValue as Date)\r\n\r\n  if (filterValue instanceof Date) {\r\n    return dateStr === formatDate(filterValue)\r\n  }\r\n\r\n  const { from: fromDate, to: toDate } = filterValue\r\n\r\n  if (dateStr === formatDate(fromDate)) return true\r\n  if (dateStr === formatDate(toDate)) return true\r\n\r\n  const cellDate = new Date(dateStr)\r\n  return cellDate >= fromDate && cellDate <= toDate\r\n}\r\n\r\nexport const FILTERS = {\r\n  partialMatch: createFilter(partialMatchFilterFn),\r\n  globalSearch: createFilter(globalFilterFn),\r\n  [FilterType.MultiSelection]: createFilter(selectionFilterFn),\r\n  [FilterType.SingleSelection]: createFilter(selectionFilterFn),\r\n  [FilterType.DatePicker]: createFilter(datePickerFilterFn)\r\n}\r\n",
      "type": "registry:file",
      "target": "components/commons/data-table/data-table-filters.ts"
    },
    {
      "path": "src/components/commons/data-table/data-table-column-selection.tsx",
      "content": "import type { CustomColumnDef } from '@/components/commons/data-table/data-table-types'\r\nimport type { Row, Table } from '@tanstack/react-table'\r\nimport { Checkbox } from '@/components/ui/checkbox'\r\n\r\nexport function DataTableColumnSelection<TData> (): CustomColumnDef<TData> {\r\n  return {\r\n    id: 'select',\r\n    header: ({ table }: { table: Table<TData> }) => (\r\n      <Checkbox\r\n        className='ml-3 mr-2'\r\n        checked={\r\n          table.getIsAllPageRowsSelected() ||\r\n          (table.getIsSomePageRowsSelected() && 'indeterminate')\r\n        }\r\n        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\r\n        aria-label=\"Select all\"\r\n      />\r\n    ),\r\n    cell: ({ row }: { row: Row<TData> }) => (\r\n      <Checkbox\r\n        className='mr-2'\r\n        checked={row.getIsSelected()}\r\n        onCheckedChange={(value) => row.toggleSelected(!!value)}\r\n        aria-label=\"Select row\"\r\n      />\r\n    ),\r\n    enableSorting: false,\r\n    enableHiding: false\r\n  }\r\n}\r\n",
      "type": "registry:block"
    },
    {
      "path": "src/components/commons/data-table/data-table-column-header.tsx",
      "content": "import type { FilterableColumn, CustomColumnDef } from '@/components/commons/data-table/data-table-types'\r\nimport { type Header, flexRender } from '@tanstack/react-table'\r\nimport {\r\n  ArrowDown,\r\n  ArrowUp,\r\n  CheckIcon,\r\n  ChevronDownIcon,\r\n  ChevronsUpDown,\r\n  EyeOff,\r\n  RotateCcwIcon\r\n} from 'lucide-react'\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuTrigger\r\n} from '@/components/ui/dropdown-menu'\r\nimport {\r\n  Command,\r\n  CommandEmpty,\r\n  CommandGroup,\r\n  CommandInput,\r\n  CommandItem,\r\n  CommandList,\r\n  CommandSeparator\r\n} from '@/components/ui/command'\r\nimport { cn } from '@/lib/utils'\r\nimport { Button } from '@/components/ui/button'\r\nimport { ScrollArea } from '@/components/ui/scroll-area'\r\nimport { Badge } from '@/components/ui/badge'\r\nimport { FilterType } from '@/components/commons/data-table/data-table-filters'\r\n\r\nexport function DataTableColumnHeader<TData> ({\r\n  header,\r\n  className,\r\n  filterableColumn\r\n}: React.HTMLAttributes<HTMLDivElement> & {\r\n  header:  Header<TData, unknown>\r\n  filterableColumn?: FilterableColumn<TData>\r\n}) {\r\n  const isSingleSelection = filterableColumn?.type === FilterType.SingleSelection\r\n\r\n  const column = header.column\r\n  const columnDef = column.columnDef as CustomColumnDef<TData>\r\n  const canSort = column.getCanSort()\r\n  const canHide = column.getCanHide()\r\n\r\n  if (!canSort && !canHide) {\r\n    return (\r\n      <div className={cn('flex items-center', className)}>\r\n        {flexRender(header.column.columnDef.header, header.getContext())}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const unknownValue = column?.getFilterValue()\r\n  const selectedValues = new Set(Array.isArray(unknownValue) ? unknownValue : [])\r\n  const isFilteredColumn = column.getIsSorted() || selectedValues.size\r\n\r\n  return (\r\n    <div\r\n      className={cn('flex items-center space-x-2', className)}\r\n      style={{ justifyContent: columnDef.align }}\r\n    >\r\n      <DropdownMenu>\r\n        <Button\r\n          variant={isFilteredColumn ? 'secondary' : 'ghost'}\r\n          size=\"sm\"\r\n          className={cn('h-8 data-[state=open]:bg-accent text-xs', isFilteredColumn && 'font-bold')}\r\n          asChild\r\n        >\r\n          <DropdownMenuTrigger>\r\n            {header.isPlaceholder\r\n              ? null\r\n              : flexRender(\r\n                column.columnDef.header,\r\n                header.getContext()\r\n              )}\r\n            {column.getIsSorted() === 'desc' ? (\r\n              <ArrowDown />\r\n            ) : column.getIsSorted() === 'asc' ? (\r\n              <ArrowUp />\r\n            ) : (\r\n              canSort ? <ChevronsUpDown /> : (\r\n                selectedValues.size\r\n                  ? (\r\n                    <Badge className='size-4 rounded-full p-0 flex justify-center items-center text-[10px] text-center'>\r\n                      {selectedValues.size > 9 ? '+9' : selectedValues.size}\r\n                    </Badge>)\r\n                  : <ChevronDownIcon />\r\n              )\r\n            )}\r\n          </DropdownMenuTrigger>\r\n        </Button>\r\n        <DropdownMenuContent align=\"start\">\r\n          {filterableColumn && filterableColumn?.options && (\r\n            <>\r\n              <Command>\r\n                {filterableColumn.options.length > 7 && <CommandInput placeholder='Search' />}\r\n                <CommandList className=\"max-h-full\">\r\n                  <CommandEmpty className='text-muted-foreground text-sm p-4'>No results found.</CommandEmpty>\r\n                  <ScrollArea className='flex max-h-52 flex-col overflow-y-auto'>\r\n                    <CommandGroup>\r\n                      {filterableColumn.options.map((option) => {\r\n                        const isSelected = selectedValues.has(option.value)\r\n                        return (\r\n                          <CommandItem\r\n                            key={option.value}\r\n                            className='cursor-pointer'\r\n                            onSelect={() => {\r\n                              if (isSingleSelection) {\r\n                                selectedValues.clear()\r\n                                selectedValues.add(option.value)\r\n                              } else {\r\n                                if (isSelected) {\r\n                                  selectedValues.delete(option.value)\r\n                                } else {\r\n                                  selectedValues.add(option.value)\r\n                                }\r\n                              }\r\n                              const filterValues = Array.from(selectedValues)\r\n                              column?.setFilterValue(\r\n                                filterValues.length ? filterValues : undefined\r\n                              )\r\n                            }}\r\n                          >\r\n                            <div\r\n                              className={cn(\r\n                                'flex size-4 items-center justify-center rounded-sm border border-primary cursor-pointer',\r\n                                isSingleSelection && 'rounded-full outline outline-offset-1',\r\n                                isSelected\r\n                                  ? 'bg-primary text-primary-foreground'\r\n                                  : 'opacity-50 [&_svg]:invisible'\r\n                              )}\r\n                            >\r\n                              <CheckIcon className=\"size-4\" />\r\n                            </div>\r\n                            {option.icon && (\r\n                              <option.icon className=\"size-4 text-muted-foreground\" />\r\n                            )}\r\n                            <span>{option.label}</span>\r\n                            {option.count && (\r\n                              <span className=\"ml-auto flex size-4 items-center justify-center font-mono text-xs\">\r\n                                {option.count}\r\n                              </span>\r\n                            )}\r\n                          </CommandItem>\r\n                        )\r\n                      })}\r\n                    </CommandGroup>\r\n                  </ScrollArea>\r\n                  {selectedValues.size > 0 && (\r\n                    <>\r\n                      <CommandSeparator />\r\n                      <CommandGroup>\r\n                        <CommandItem\r\n                          onSelect={() => column?.setFilterValue(undefined)}\r\n                          className=\"justify-center text-center cursor-pointer\"\r\n                        >\r\n                          Clear filter\r\n                        </CommandItem>\r\n                      </CommandGroup>\r\n                    </>\r\n                  )}\r\n                </CommandList>\r\n              </Command>\r\n              <DropdownMenuSeparator />\r\n            </>\r\n          )}\r\n          {canSort && (\r\n            <>\r\n              <DropdownMenuItem onClick={() => column.toggleSorting(false)}>\r\n                <ArrowUp className=\"h-3.5 w-3.5 text-muted-foreground/70\" />\r\n                Asc\r\n              </DropdownMenuItem>\r\n              <DropdownMenuItem onClick={() => column.toggleSorting(true)}>\r\n                <ArrowDown className=\"h-3.5 w-3.5 text-muted-foreground/70\" />\r\n                Desc\r\n              </DropdownMenuItem>\r\n              {column.getIsSorted() && (\r\n                <>\r\n                  <DropdownMenuSeparator />\r\n                  <DropdownMenuItem onClick={() => column.clearSorting()}>\r\n                    <RotateCcwIcon className=\"h-3.5 w-3.5 text-muted-foreground/70\" />\r\n                    Reset\r\n                  </DropdownMenuItem>\r\n                </>\r\n              )}\r\n            </>\r\n          )}\r\n          {canHide && canSort && <DropdownMenuSeparator />}\r\n          {canHide && (\r\n            <DropdownMenuItem onClick={() => column.toggleVisibility(false)}>\r\n              <EyeOff className=\"h-3.5 w-3.5 text-muted-foreground/70\" />\r\n              Hide\r\n            </DropdownMenuItem>\r\n          )}\r\n        </DropdownMenuContent>\r\n      </DropdownMenu>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:block"
    },
    {
      "path": "src/components/commons/date-picker.tsx",
      "content": "import * as React from 'react'\r\nimport { CalendarIcon, ChevronDown, ChevronDownIcon, ChevronLeft, ChevronRight } from 'lucide-react'\r\nimport {\r\n  format,\r\n  addMonths,\r\n  subMonths,\r\n  setMonth,\r\n  setYear,\r\n  getDaysInMonth,\r\n  startOfMonth,\r\n  getDay,\r\n  isToday,\r\n  isSameDay,\r\n  isAfter,\r\n  endOfDay,\r\n  startOfDay,\r\n  isWithinInterval\r\n} from 'date-fns'\r\n\r\nimport { cn } from '@/lib/utils'\r\nimport { Button } from '@/components/ui/button'\r\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover'\r\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion'\r\nimport { ScrollArea } from '@/components/ui/scroll-area'\r\nimport { Switch } from '@/components/ui/switch'\r\n\r\nconst DAY_NAMES = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']\r\nconst MONTHS = [\r\n  { name: 'Jan', full: 'January' },\r\n  { name: 'Feb', full: 'February' },\r\n  { name: 'Mar', full: 'March' },\r\n  { name: 'Apr', full: 'April' },\r\n  { name: 'May', full: 'May' },\r\n  { name: 'Jun', full: 'June' },\r\n  { name: 'Jul', full: 'July' },\r\n  { name: 'Aug', full: 'August' },\r\n  { name: 'Sep', full: 'September' },\r\n  { name: 'Oct', full: 'October' },\r\n  { name: 'Nov', full: 'November' },\r\n  { name: 'Dec', full: 'December' }\r\n]\r\n\r\nenum Modes {\r\n  Duo = 'duo',\r\n  Single = 'single',\r\n  Range = 'range'\r\n}\r\n\r\nexport type DatePickerModes =  `${Modes}`\r\nexport type DateRangeValue = { from?: Date, to?: Date }\r\nexport type DateValue = Date | DateRangeValue\r\n\r\ntype DatePickerRange = {\r\n  mode?: `${Modes.Range}`\r\n  defaultValue?: DateRangeValue\r\n  value?: DateRangeValue\r\n  onValueChange?: (date: DateRangeValue | undefined) => void\r\n}\r\n\r\ntype DatePickerSingle = {\r\n  mode?: `${Modes.Single}`\r\n  defaultValue?: Date\r\n  value?: Date\r\n  onValueChange?: (date: Date | undefined) => void\r\n}\r\n\r\ntype DatePickerDuo = {\r\n  mode?: `${Modes.Duo}`\r\n  defaultValue?: DateValue\r\n  value?: DateValue\r\n  onValueChange?: (date: DateValue | undefined) => void\r\n}\r\n\r\ntype DatePickerBase = {\r\n  className?: string\r\n  onReset?: () => void\r\n  placeholder?: string\r\n  onModeChange?: (mode: `${Modes}`) => void,\r\n  align?: 'start' | 'center' | 'end';\r\n}\r\n\r\nfunction DatePickerTrigger ({\r\n  placeholder,\r\n  className,\r\n  selectedDate,\r\n  rangeStart,\r\n  rangeEnd,\r\n  isRangeMode\r\n}: {\r\n  placeholder?: string,\r\n  className?: string\r\n  selectedDate?: Date,\r\n  rangeStart?: Date,\r\n  rangeEnd?: Date,\r\n  isRangeMode?: boolean\r\n}) {\r\n  const formatDisplayText = () => {\r\n    const placeholderText = placeholder ? placeholder : `Pick a ${isRangeMode ? 'date range' : 'date'}`\r\n    if (!isRangeMode) {\r\n      return selectedDate ? format(selectedDate ? selectedDate : new Date(), 'PPP') : placeholderText\r\n    } else if (isRangeMode) {\r\n      if (rangeStart && rangeEnd) {\r\n        return `${format(rangeStart, 'PP')} - ${format(rangeEnd, 'PP')}`\r\n      } else if (rangeStart) {\r\n        return `${format(rangeStart, 'PP')} - ?`\r\n      } else {\r\n        return placeholderText\r\n      }\r\n    }\r\n  }\r\n  return (\r\n    <Button\r\n      variant=\"outline\"\r\n      className={cn(\r\n        'w-auto min-w-[180px] justify-start text-left font-normal',\r\n        (!isRangeMode && !selectedDate) || (isRangeMode && !rangeStart) ? 'text-muted-foreground' : '',\r\n        className\r\n      )}\r\n      asChild\r\n    >\r\n      <PopoverTrigger>\r\n        <span className=\"flex-1\">{formatDisplayText()}</span>\r\n        <CalendarIcon className=\"ml-2 h-4 w-4 text-muted-foreground\" />\r\n      </PopoverTrigger>\r\n    </Button>\r\n  )\r\n}\r\n\r\nfunction DatePickerHeader ({\r\n  currentMonth,\r\n  view,\r\n  setView,\r\n  previousMonth,\r\n  nextMonth\r\n}: {\r\n  currentMonth: Date;\r\n  view: 'days' | 'years';\r\n  setView: (view: 'days' | 'years') => void;\r\n  previousMonth: () => void;\r\n  nextMonth: () => void;\r\n}) {\r\n  return (\r\n    <div className=\"flex items-center justify-between pb-1\">\r\n      <Button\r\n        variant=\"ghost\"\r\n        className=\"text-sm font-medium flex items-center data-[state=open]:text-muted-foreground/80 [&[data-state=open]>svg]:rotate-180\"\r\n        onClick={() => setView(view === 'days' ? 'years' : 'days')}\r\n        data-state={view === 'years' ? 'open' : 'closed'}\r\n      >\r\n        {format(currentMonth ? currentMonth : new Date(), 'MMMM yyyy')}\r\n        <ChevronDown className=\"ml-1 h-4 w-4 transition-transform duration-200\" />\r\n      </Button>\r\n      <div className=\"flex items-center\">\r\n        <Button variant=\"ghost\" className=\"h-8 w-8 p-0\" onClick={previousMonth}>\r\n          <ChevronLeft className=\"h-4 w-4\" />\r\n          <span className=\"sr-only\">Previous month</span>\r\n        </Button>\r\n        <Button variant=\"ghost\" className=\"h-8 w-8 p-0\" onClick={nextMonth}>\r\n          <ChevronRight className=\"h-4 w-4\" />\r\n          <span className=\"sr-only\">Next month</span>\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction DatePickerWeekDays () {\r\n  return (\r\n    <div className=\"grid grid-cols-7 gap-1 text-center text-xs\">\r\n      {DAY_NAMES.map((day) => (\r\n        <div key={day} className=\"py-1 font-medium\">\r\n          {day}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction DatePickerGridDays ({\r\n  selectedDate,\r\n  currentMonth,\r\n  isRangeMode,\r\n  rangeStart,\r\n  rangeEnd,\r\n  rangeHover,\r\n  handleSelect,\r\n  handleDayHover\r\n}: {\r\n  selectedDate?: Date;\r\n  currentMonth: Date;\r\n  isRangeMode?: boolean;\r\n  rangeStart?: Date;\r\n  rangeEnd?: Date;\r\n  rangeHover?: Date;\r\n  handleSelect: (date: Date) => void;\r\n  handleDayHover: (date: Date) => void;\r\n}) {\r\n  // Get the days of the month\r\n  const calendarDays = React.useMemo(() => {\r\n    const daysInMonth = getDaysInMonth(currentMonth ? currentMonth : new Date())\r\n    const startDay = getDay(startOfMonth(currentMonth ? currentMonth : new Date()))\r\n    const days = []\r\n\r\n    for (let i = 0; i < startDay; i++) {\r\n      days.push(null)\r\n    }\r\n\r\n    for (let day = 1; day <= daysInMonth; day++) {\r\n      const year = currentMonth ? currentMonth.getFullYear() : new Date().getFullYear()\r\n      const month = currentMonth ? currentMonth.getMonth() : new Date().getMonth()\r\n      days.push(new Date(year, month, day))\r\n    }\r\n\r\n    return days\r\n  }, [currentMonth])\r\n\r\n  // Check if a date is within the range\r\n  const isInRange = (day: Date) => {\r\n    if (!isRangeMode || !day) return false\r\n\r\n    if (rangeStart && rangeEnd) {\r\n      return isWithinInterval(day, {\r\n        start: startOfDay(rangeStart),\r\n        end: endOfDay(rangeEnd)\r\n      })\r\n    }\r\n\r\n    if (rangeStart && rangeHover) {\r\n      const isHoverAfterStart = isAfter(rangeHover, rangeStart)\r\n      return isWithinInterval(day, {\r\n        start: startOfDay(isHoverAfterStart ? rangeStart : rangeHover),\r\n        end: endOfDay(isHoverAfterStart ? rangeHover : rangeStart)\r\n      })\r\n    }\r\n\r\n    return false\r\n  }\r\n\r\n  // Check if a date is the start of the range\r\n  const isRangeStart = (day: Date) => {\r\n    if (!isRangeMode || !rangeStart || !day) return false\r\n    return isSameDay(day, rangeStart)\r\n  }\r\n\r\n  // Check if a date is the end of the range\r\n  const isRangeEnd = (day: Date) => {\r\n    if (!isRangeMode || !rangeEnd || !day) return false\r\n    return isSameDay(day, rangeEnd)\r\n  }\r\n\r\n  return (\r\n    <div className=\"mt-1 grid grid-cols-7\">\r\n      {calendarDays.map((day, i) => (\r\n        <div key={i}>\r\n          {day ? (\r\n            <Button\r\n              variant=\"ghost\"\r\n              title={isToday(day) ? 'Today' : undefined}\r\n              className={cn(\r\n                // Base style\r\n                'h-8 w-8 p-0 font-normal relative',\r\n\r\n                // Today style\r\n                isToday(day) &&\r\n                  'bg-accent hover:bg-secondary text-accent-foreground rounded-full',\r\n\r\n                // Selected style\r\n                !isRangeMode && selectedDate && isSameDay(day, selectedDate ? selectedDate : new Date()) &&\r\n                  'bg-primary text-primary-foreground hover:bg-primary dark:hover:bg-primary hover:text-primary-foreground',\r\n\r\n                // Range style\r\n                isRangeMode && isInRange(day) &&\r\n                  'bg-primary/10 dark:bg-primary/20 rounded-none',\r\n\r\n                // Range start style\r\n                isRangeMode && isRangeStart(day) &&\r\n                  'bg-primary dark:bg-primary hover:bg-primary dark:hover:bg-primary text-primary-foreground hover:text-primary-foreground dark:hover:text-primary-foreground rounded-l-md rounded-r-none',\r\n\r\n                // Range end style\r\n                isRangeMode && isRangeEnd(day) &&\r\n                  'bg-primary dark:bg-primary hover:bg-primary dark:hover:bg-primary text-primary-foreground hover:text-primary-foreground dark:hover:text-primary-foreground rounded-r-md rounded-l-none',\r\n\r\n                // Range start and end style\r\n                isRangeMode && isRangeStart(day) && isRangeEnd(day) &&\r\n                  'rounded-md'\r\n              )}\r\n              onClick={() => handleSelect(day)}\r\n              onMouseEnter={() => handleDayHover(day)}\r\n            >\r\n              {day.getDate()}\r\n              {isToday(day) && <span className='size-1 bg-primary absolute bottom-0.5 left-1/2 -translate-x-1/2 rounded-full' />}\r\n            </Button>\r\n          ) : (\r\n            <div className=\"h-8 w-8\" />\r\n          )}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction DatePickerListYears ({\r\n  currentMonth,\r\n  view,\r\n  handleMonthSelect\r\n}: {\r\n  currentMonth: Date | null;\r\n  view: 'days' | 'years';\r\n  handleMonthSelect: (year: number, month: number) => void\r\n}) {\r\n  const currentYearRef = React.useRef<HTMLDivElement>(null)\r\n\r\n  const currentYear = currentMonth ? currentMonth.getFullYear() : new Date().getFullYear()\r\n  const currentYearValue = `year-${currentYear}`\r\n  const currentMonthIndex = currentMonth ? currentMonth.getMonth() : new Date().getMonth()\r\n\r\n  // Scroll to current year when years view is opened\r\n  React.useEffect(() => {\r\n    if (view === 'years' && currentYearRef.current) {\r\n      setTimeout(() => {\r\n        currentYearRef.current?.scrollIntoView({ block: 'start', behavior: 'auto' })\r\n      }, 100)\r\n    }\r\n  }, [view])\r\n\r\n  // Generate years from 1950 to 2050\r\n  const years = React.useMemo(() => {\r\n    return Array.from({ length: 2050 - 1950 + 1 }, (_, i) => 1950 + i)\r\n  }, [])\r\n\r\n  return (\r\n    <ScrollArea className=\"h-full pl-2 pr-4\">\r\n      <Accordion type=\"single\" collapsible defaultValue={currentYearValue} className=\"w-full\">\r\n        {years.map((year) => (\r\n          <div key={year} ref={year === currentYear ? currentYearRef : undefined}>\r\n            <AccordionItem value={`year-${year}`}>\r\n              <AccordionTrigger className=\"text-sm py-2 [&>svg]:last:hidden hover:no-underline border-t rounded-none text-foreground/70 hover:text-foreground\">\r\n                <ChevronDownIcon className=\"text-muted-foreground pointer-events-none size-4 shrink-0 translate-y-0.5 transition-transform duration-200\" />\r\n                <span className=\"flex-1\">{year}</span>\r\n              </AccordionTrigger>\r\n              <AccordionContent>\r\n                <div className=\"grid grid-cols-4 gap-2\">\r\n                  {MONTHS.map((month, index) => (\r\n                    <Button\r\n                      key={month.name}\r\n                      variant={index === currentMonthIndex && year === currentYear ? 'default' : 'outline'}\r\n                      size=\"sm\"\r\n                      className=\"text-sm\"\r\n                      title={month.full}\r\n                      onClick={() => handleMonthSelect(year, index)}\r\n                    >\r\n                      {month.name}\r\n                    </Button>\r\n                  ))}\r\n                </div>\r\n              </AccordionContent>\r\n            </AccordionItem>\r\n          </div>\r\n        ))}\r\n      </Accordion>\r\n    </ScrollArea>\r\n  )\r\n}\r\n\r\nfunction DatePickerCalendar ({\r\n  view,\r\n  currentMonth,\r\n  handleSelect,\r\n  isRangeMode,\r\n  rangeStart,\r\n  rangeEnd,\r\n  rangeHover,\r\n  selectedDate,\r\n  handleDayHover,\r\n  handleMonthSelect\r\n}: {\r\n  view: 'days' | 'years';\r\n  currentMonth: Date;\r\n  handleSelect: (day: Date) => void;\r\n  isRangeMode: boolean;\r\n  rangeStart: Date | undefined;\r\n  rangeEnd: Date | undefined;\r\n  rangeHover: Date | undefined;\r\n  selectedDate: Date | undefined;\r\n  handleDayHover: (day: Date) => void;\r\n  handleMonthSelect: (year: number, month: number) => void;\r\n}) {\r\n  return (\r\n    <>\r\n      <div\r\n        className={cn(\r\n          'transition-opacity duration-200',\r\n          view === 'years' ? 'opacity-0 pointer-events-none' : 'opacity-100'\r\n        )}\r\n      >\r\n        <DatePickerWeekDays />\r\n        <DatePickerGridDays\r\n          currentMonth={currentMonth}\r\n          handleSelect={handleSelect}\r\n          isRangeMode={isRangeMode}\r\n          rangeStart={rangeStart}\r\n          rangeEnd={rangeEnd}\r\n          rangeHover={rangeHover}\r\n          selectedDate={selectedDate as Date}\r\n          handleDayHover={handleDayHover}\r\n        />\r\n      </div>\r\n\r\n      <div\r\n        className={cn(\r\n          'absolute inset-0 z-10 transition-opacity duration-200 bg-popover',\r\n          view === 'years' ? 'opacity-100' : 'opacity-0 pointer-events-none'\r\n        )}\r\n      >\r\n        <DatePickerListYears\r\n          currentMonth={currentMonth as Date}\r\n          handleMonthSelect={handleMonthSelect}\r\n          view={view}\r\n        />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nconst dateOrUndefined = (date: DateValue | undefined) => date instanceof Date ? date : undefined\r\n\r\nexport function DatePicker ({\r\n  className,\r\n  defaultValue,\r\n  value,\r\n  onValueChange,\r\n  onReset,\r\n  placeholder,\r\n  mode = 'duo',\r\n  onModeChange,\r\n  align = 'end'\r\n}: DatePickerBase & (\r\n  DatePickerSingle | DatePickerRange | DatePickerDuo\r\n)) {\r\n  const [selectedDate, setSelectedDate] = React.useState<Date | undefined>(dateOrUndefined(defaultValue))\r\n  const [currentMonth, setCurrentMonth] = React.useState<Date>(dateOrUndefined(value) || dateOrUndefined(defaultValue) || new Date())\r\n  const [isOpen, setIsOpen] = React.useState(false)\r\n  const [view, setView] = React.useState<'days' | 'years'>('days')\r\n  const [isRangeMode, setIsRangeMode] = React.useState(mode === 'range')\r\n\r\n  // Range selection states\r\n  const [rangeStart, setRangeStart] = React.useState<Date | undefined>(dateOrUndefined((defaultValue as DateRangeValue)?.from))\r\n  const [rangeEnd, setRangeEnd] = React.useState<Date | undefined>(dateOrUndefined((defaultValue as DateRangeValue)?.to))\r\n  const [rangeHover, setRangeHover] = React.useState<Date | undefined>(undefined)\r\n  // Set range selection states\r\n  React.useEffect(() => {\r\n    if (value && typeof value !== 'object') {\r\n      setRangeStart(value)\r\n      setRangeEnd(undefined)\r\n    } else if (value && 'from' in value) {\r\n      setRangeStart(value.from)\r\n      setRangeEnd(value.to)\r\n    }\r\n  }, [value])\r\n\r\n  // Reset view when popover closes, but only after animation completes\r\n  React.useEffect(() => {\r\n    let timeoutId: NodeJS.Timeout | null = null\r\n\r\n    if (!isOpen && view !== 'days') {\r\n      timeoutId = setTimeout(() => {\r\n        setView('days')\r\n      }, 200)\r\n    }\r\n\r\n    return () => {\r\n      if (timeoutId) {\r\n        clearTimeout(timeoutId)\r\n      }\r\n    }\r\n  }, [isOpen, view])\r\n\r\n  // Handle date selection\r\n  const handleSelect = (day: Date) => {\r\n    if (!isRangeMode) {\r\n      setSelectedDate(day)\r\n      setCurrentMonth(day)\r\n      onValueChange?.(day)\r\n      setIsOpen(false)\r\n    } else if (isRangeMode) {\r\n      // If no start date is selected or if both start and end are already selected\r\n      if (!rangeStart || (rangeStart && rangeEnd)) {\r\n        setRangeStart(day)\r\n        setRangeEnd(undefined)\r\n        setRangeHover(undefined)\r\n      }\r\n      // If only start date is selected and the clicked date is after start\r\n      else if (rangeStart && !rangeEnd) {\r\n        // Ensure proper order (earlier date first)\r\n        const isAfterStart = isAfter(day, rangeStart)\r\n\r\n        if (isAfterStart) {\r\n          setRangeEnd(day)\r\n        } else {\r\n          setRangeEnd(rangeStart)\r\n          setRangeStart(day)\r\n        }\r\n\r\n        (onValueChange as DatePickerRange['onValueChange'])?.({\r\n          from: isAfterStart ? rangeStart : day,\r\n          to: isAfterStart ? day : rangeStart\r\n        })\r\n        setIsOpen(false)\r\n      }\r\n    }\r\n  }\r\n\r\n  // Navigate to previous month\r\n  const previousMonth = () => {\r\n    setCurrentMonth(subMonths(currentMonth instanceof Date ? currentMonth : new Date(), 1))\r\n  }\r\n\r\n  // Navigate to next month\r\n  const nextMonth = () => {\r\n    setCurrentMonth(addMonths(currentMonth instanceof Date ? currentMonth : new Date(), 1))\r\n  }\r\n\r\n  // Handle month selection\r\n  const handleMonthSelect = (year: number, monthIndex: number) => {\r\n    const newDate = setMonth(setYear(currentMonth instanceof Date ? currentMonth : new Date(), year), monthIndex)\r\n    setCurrentMonth(newDate)\r\n    setView('days')\r\n  }\r\n\r\n  // Handle reset\r\n  const handleReset = () => {\r\n    if (!onReset) return\r\n\r\n    if (!isRangeMode) {\r\n      setSelectedDate(undefined)\r\n      onValueChange?.(undefined)\r\n    } else if (isRangeMode) {\r\n      setRangeStart(undefined)\r\n      setRangeEnd(undefined)\r\n      setRangeHover(undefined);\r\n      (onValueChange as DatePickerRange['onValueChange'])?.({\r\n        from: undefined,\r\n        to: undefined\r\n      })\r\n    }\r\n\r\n    onReset()\r\n  }\r\n\r\n  // Handle switch mode\r\n  const handleSwitchMode = (checked: boolean) => {\r\n    setIsRangeMode(checked)\r\n    if (checked) {\r\n      (onValueChange as DatePickerRange['onValueChange'])?.(rangeStart && rangeEnd\r\n        ? { from: rangeStart,to: rangeEnd }\r\n        : undefined)\r\n      rangeStart && setCurrentMonth(rangeStart)\r\n    } else {\r\n      onValueChange?.(selectedDate as Date)\r\n      selectedDate && setCurrentMonth(selectedDate)\r\n    }\r\n    onModeChange?.(checked ? 'range' : 'single')\r\n  }\r\n\r\n  return (\r\n    <Popover open={isOpen} onOpenChange={setIsOpen}>\r\n      <DatePickerTrigger\r\n        className={className}\r\n        placeholder={placeholder}\r\n        selectedDate={selectedDate as Date}\r\n        rangeStart={rangeStart}\r\n        rangeEnd={rangeEnd}\r\n        isRangeMode={isRangeMode}\r\n      />\r\n      <PopoverContent className=\"w-auto p-0\" align={align}>\r\n        <div className=\"p-3\">\r\n          <DatePickerHeader\r\n            currentMonth={currentMonth as Date}\r\n            view={view}\r\n            setView={setView}\r\n            previousMonth={previousMonth}\r\n            nextMonth={nextMonth}\r\n          />\r\n\r\n          <div className=\"relative\">\r\n            <DatePickerCalendar\r\n              currentMonth={currentMonth as Date}\r\n              handleMonthSelect={handleMonthSelect}\r\n              handleSelect={handleSelect}\r\n              isRangeMode={isRangeMode}\r\n              rangeStart={rangeStart}\r\n              rangeEnd={rangeEnd}\r\n              rangeHover={rangeHover}\r\n              selectedDate={selectedDate as Date}\r\n              view={view}\r\n              handleDayHover={(day: Date) => {\r\n                if (isRangeMode && rangeStart && !rangeEnd) {\r\n                  setRangeHover(day)\r\n                }\r\n              }}\r\n            />\r\n\r\n            {mode === 'duo' && (\r\n              <div className='flex justify-between items-center border-t py-2 text-sm font-medium'>\r\n                Range mode\r\n                <Switch\r\n                  checked={isRangeMode}\r\n                  onCheckedChange={handleSwitchMode}\r\n                />\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {onReset && ((!isRangeMode && selectedDate) || (isRangeMode && (rangeStart || rangeEnd))) && (\r\n            <div className='border-t'>\r\n              <Button className=\"w-full mt-2\" variant=\"secondary\" onClick={handleReset}>\r\n                Clear {isRangeMode ? 'range' : 'date'}\r\n              </Button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </PopoverContent>\r\n    </Popover>\r\n  )\r\n}\r\n",
      "type": "registry:block"
    }
  ]
}